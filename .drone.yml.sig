eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdDoKICAgIGltYWdlOiBweXRob246Mi43CiAgICBjb21tYW5kczogCiAgICAgIC0gcGlwIGluc3RhbGwgLXIgYXBwbGljYXRpb24vcmVxdWlyZW1lbnRzLnR4dAogICAgICAtIHB5dGhvbiBhcHBsaWNhdGlvbi90ZXN0cy5weQogIHB1Ymxpc2g6CiAgICBpbWFnZTogZG9ja2VyOjEuMTMuMQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgIiRET0NLRVJfVVNFUk5BTUUiIC0tcGFzc3dvcmQgIiRET0NLRVJfUEFTU1dPUkQiIC1lIG1lQGNvbm5lcnN3YW5uLm1lCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHlvdXJidWRkeWNvbm5lci9kb2NrZXItaGVsbG8td29ybGQgLgogICAgICAtIGRvY2tlciBwdXNoIHlvdXJidWRkeWNvbm5lci9kb2NrZXItaGVsbG8td29ybGQKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0ke0RPQ0tFUl9VU0VSTkFNRX0KICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JHtET0NLRVJfUEFTU1dPUkR9CiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgIyBwdWJsaXNoOgogICMgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAjICAgcmVwbzogeW91cmJ1ZGR5Y29ubmVyL2RvY2tlci1oZWxsby13b3JsZAogICMgICB1c2VybmFtZTogJHtET0NLRVJfVVNFUk5BTUV9CiAgIyAgIHBhc3N3b3JkOiAke0RPQ0tFUl9QQVNTV09SRH0KICBkZXBsb3k6IAogICAgaW1hZ2U6IHBlbG90b24vZHJvbmUtcmFuY2hlcgogICAgdXJsOiBodHRwOi8vcmFuY2hlci5zd2FubmFpcmxpbmVzLmNvbQogICAgYWNjZXNzX2tleTogJHtSQU5DSEVSX0FDQ0VTU30KICAgIHNlY3JldF9rZXk6ICR7UkFOQ0hFUl9TRUNSRVR9CiAgICBzZXJ2aWNlOiBoZWxsby13b3JsZC9oZWxsby13b3JsZAogICAgZG9ja2VyX2ltYWdlOiB5b3VyYnVkZHljb25uZXIvZG9ja2VyLWhlbGxvLXdvcmxkOmxhdGVzdAogICAgY29uZmlybTogdHJ1ZQogICAgdGltZW91dDogMTIwCiAgc2xhY2s6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2ViaG9vazogaHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDBBRkNQUTRUL0I1N1FRTkszSi82eWREV0tMUXc2OHZ1MkxBSHo5YlV2U28KICAgIHJlY2lwaWVudDogY29ubmVyCiAgICB0ZW1wbGF0ZTogPgogICAgICB7eyNzdWNjZXNzIGJ1aWxkLnN0YXR1c319CiAgICAgICAgQnVpbGQge3tidWlsZC5udW1iZXJ9fSAgZm9yIHt7cmVwby5uYW1lfX0ve3tidWlsZC5icmFuY2h9fSBzdWNjZWVkZWQuIEdvb2Qgam9iLgogICAgICB7e2Vsc2V9fQogICAgICAgIEJ1aWxkIHt7YnVpbGQubnVtYmVyfX0gIGZvciB7e3JlcG8ubmFtZX19L3t7YnVpbGQuYnJhbmNofX0gRmFpbGVkLiBZb3Ugc3Vjay4KICAgICAge3svc3VjY2Vzc319CiAgICAgIEJ1aWxkIExpbms6IHt7YnVpbGQubGlua319CiAgICAK.I7EB5KMEi-4dC08qtzSZ3gl5nB9tNixKlnpx28_Nh9Y